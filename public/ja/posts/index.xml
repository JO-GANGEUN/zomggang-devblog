<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Zomggang Devblog</title><link>https://jo-gangeun.github.io/zomggang-devblog/ja/posts/</link><description>Recent content in Posts on Zomggang Devblog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 04 Apr 2025 21:56:30 +0900</lastBuildDate><atom:link href="https://jo-gangeun.github.io/zomggang-devblog/ja/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello World</title><link>https://jo-gangeun.github.io/zomggang-devblog/ja/posts/hello-world/</link><pubDate>Fri, 04 Apr 2025 21:56:30 +0900</pubDate><guid>https://jo-gangeun.github.io/zomggang-devblog/ja/posts/hello-world/</guid><description>&lt;p>zomggang world&amp;rsquo;s now loading&lt;/p>
&lt;p>좀깡월드 구축중&amp;hellip;&lt;/p>
&lt;p>zommgang world ローディング中。。。&lt;/p></description><content>&lt;p>zomggang world&amp;rsquo;s now loading&lt;/p>
&lt;p>좀깡월드 구축중&amp;hellip;&lt;/p>
&lt;p>zommgang world ローディング中。。。&lt;/p></content></item><item><title>How to Make Devblog With Hugo</title><link>https://jo-gangeun.github.io/zomggang-devblog/ja/posts/how-to-make-devblog-with-hugo/</link><pubDate>Fri, 04 Apr 2025 21:56:30 +0900</pubDate><guid>https://jo-gangeun.github.io/zomggang-devblog/ja/posts/how-to-make-devblog-with-hugo/</guid><description>&lt;p>今まで私が作ったブログのプロセスまとめ！&lt;/p>
&lt;h2 id="-事前準備">✅ 事前準備&lt;/h2>
&lt;ul>
&lt;li>GitHubアカウント&lt;/li>
&lt;li>Hugoインストール&lt;/li>
&lt;/ul>
&lt;h2 id="-1段階-githubでrepository生成">✅ 1段階: GitHubでRepository生成&lt;/h2>
&lt;ul>
&lt;li>名前： &lt;code>zomggang-devblog&lt;/code>.&lt;/li>
&lt;li>Public repositoryで作成&lt;/li>
&lt;/ul>
&lt;h2 id="-2段階-hugoインストール">✅ 2段階: Hugoインストール&lt;/h2>
&lt;p>なぜhugoなのか？ まず、Hugoは静的ページを作るツールです。開発者に挑戦した時はjekyllが主流だったようですが、最近はHugoがもっと速いとか、localで修正してすぐ反映される点で、Hugoをよく使ってるようです。&lt;/p>
&lt;p>Jekyll(Ruby言語ベース)とHugo(Go言語)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>項目&lt;/th>
&lt;th>Jekyll&lt;/th>
&lt;th>Hugo&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>言語&lt;/td>
&lt;td>Ruby 基盤&lt;/td>
&lt;td>Go 基盤&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>項目&lt;/td>
&lt;td>Jekyll&lt;/td>
&lt;td>Hugo&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td>
&lt;td>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td>
&lt;td>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ビルド速度&lt;/td>
&lt;td>やや遅め（特に大規模プロジェクトの場合）&lt;/td>
&lt;td>非常に高速 ⚡&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>インストールの難易度&lt;/td>
&lt;td>Ruby環境が必要 → Windowsでは少し面倒&lt;/td>
&lt;td>Goが組み込まれており、インストールが簡単&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>使いやすさ&lt;/td>
&lt;td>GitHubとの連携が簡単（公式サポートあり）&lt;/td>
&lt;td>GitHubも使用可能だが、設定が必要&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>テーマの数&lt;/td>
&lt;td>多い（古いものも含まれる）&lt;/td>
&lt;td>多く、モダンでトレンド感のあるテーマが豊富&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>カスタマイズ性&lt;/td>
&lt;td>やや複雑&lt;/td>
&lt;td>比較的簡単&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ドキュメントの充実度&lt;/td>
&lt;td>充実している&lt;/td>
&lt;td>充実しており、最新の情報も多い&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>🎯 &lt;strong>結論&lt;/strong>：&lt;br>
自分は &lt;strong>Windows環境&lt;/strong> で開発しており、&lt;strong>高速なビルド&lt;/strong> と &lt;strong>簡単なセットアップ&lt;/strong> を重視しているため、&lt;strong>Hugo&lt;/strong> を選択しました。&lt;/p>&lt;/blockquote>
&lt;h4 id="hugo의-환경별-install-커맨드">Hugo의 환경별 install 커맨드&lt;/h4>
&lt;p>&lt;a href="https://gohugo.io/installation/">https://gohugo.io/installation/&lt;/a>
일단 저는 Windows로 나는 최근의 단말을 포맷해서 Package Manager 의 npm조차 없어서 choco는 사용하지 못했고 기본 winget을 이용해 설치 했다.&lt;/p></description><content>&lt;p>今まで私が作ったブログのプロセスまとめ！&lt;/p>
&lt;h2 id="-事前準備">✅ 事前準備&lt;/h2>
&lt;ul>
&lt;li>GitHubアカウント&lt;/li>
&lt;li>Hugoインストール&lt;/li>
&lt;/ul>
&lt;h2 id="-1段階-githubでrepository生成">✅ 1段階: GitHubでRepository生成&lt;/h2>
&lt;ul>
&lt;li>名前： &lt;code>zomggang-devblog&lt;/code>.&lt;/li>
&lt;li>Public repositoryで作成&lt;/li>
&lt;/ul>
&lt;h2 id="-2段階-hugoインストール">✅ 2段階: Hugoインストール&lt;/h2>
&lt;p>なぜhugoなのか？ まず、Hugoは静的ページを作るツールです。開発者に挑戦した時はjekyllが主流だったようですが、最近はHugoがもっと速いとか、localで修正してすぐ反映される点で、Hugoをよく使ってるようです。&lt;/p>
&lt;p>Jekyll(Ruby言語ベース)とHugo(Go言語)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>項目&lt;/th>
&lt;th>Jekyll&lt;/th>
&lt;th>Hugo&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>言語&lt;/td>
&lt;td>Ruby 基盤&lt;/td>
&lt;td>Go 基盤&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>項目&lt;/td>
&lt;td>Jekyll&lt;/td>
&lt;td>Hugo&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td>
&lt;td>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td>
&lt;td>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ビルド速度&lt;/td>
&lt;td>やや遅め（特に大規模プロジェクトの場合）&lt;/td>
&lt;td>非常に高速 ⚡&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>インストールの難易度&lt;/td>
&lt;td>Ruby環境が必要 → Windowsでは少し面倒&lt;/td>
&lt;td>Goが組み込まれており、インストールが簡単&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>使いやすさ&lt;/td>
&lt;td>GitHubとの連携が簡単（公式サポートあり）&lt;/td>
&lt;td>GitHubも使用可能だが、設定が必要&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>テーマの数&lt;/td>
&lt;td>多い（古いものも含まれる）&lt;/td>
&lt;td>多く、モダンでトレンド感のあるテーマが豊富&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>カスタマイズ性&lt;/td>
&lt;td>やや複雑&lt;/td>
&lt;td>比較的簡単&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ドキュメントの充実度&lt;/td>
&lt;td>充実している&lt;/td>
&lt;td>充実しており、最新の情報も多い&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>🎯 &lt;strong>結論&lt;/strong>：&lt;br>
自分は &lt;strong>Windows環境&lt;/strong> で開発しており、&lt;strong>高速なビルド&lt;/strong> と &lt;strong>簡単なセットアップ&lt;/strong> を重視しているため、&lt;strong>Hugo&lt;/strong> を選択しました。&lt;/p>&lt;/blockquote>
&lt;h4 id="hugo의-환경별-install-커맨드">Hugo의 환경별 install 커맨드&lt;/h4>
&lt;p>&lt;a href="https://gohugo.io/installation/">https://gohugo.io/installation/&lt;/a>
일단 저는 Windows로 나는 최근의 단말을 포맷해서 Package Manager 의 npm조차 없어서 choco는 사용하지 못했고 기본 winget을 이용해 설치 했다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>winget install Hugo.Hugo.Extended
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>보통은 choco로 설치하는 듯하다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>choco install hugo-extended
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="-3단계-로컬에서-새-hugo사이트-생성">✅ 3단계: 로컬에서 새 hugo사이트 생성&lt;/h2>
&lt;p>&lt;em>&lt;strong>git submodule&lt;/strong>&lt;/em>을 사용할 수 있다는 건 정말 좋았다!&lt;br>
다른 블로그들을 참고해서 설치해봤지만,, 잘 안 됐는데 공식문서를 따라하니 쉽게 됐다&lt;br>
공식 문서 : &lt;a href="https://gohugo.io/getting-started/quick-start/">https://gohugo.io/getting-started/quick-start/&lt;/a>&lt;/p>
&lt;p>나의 경우&lt;/p>
&lt;h3 id="일단-repository명과-같은-사이트를-만들고">일단 repository명과 같은 사이트를 만들고&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new site zomggang-devblog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="테마선택">테마선택&lt;/h3>
&lt;p>&lt;a href="https://themes.gohugo.io/">https://themes.gohugo.io/&lt;/a>
&lt;img src="https://jo-gangeun.github.io/zomggang-devblog/image/20250406/hugo_theme.png" alt="poster">&lt;/p>
&lt;p>원래는 하고 싶었던 게 있었는데 무거워서 그런가,,, 도통 deploy가 안되길래 추천은
공식이 추천하는 papermode나 좀 가벼워보이는 테마부터 넣어보는 것을 추천한다.
조금 헤맸지만 일단 re-terminal은 문제없이 반영이 됐다!&lt;/p>
&lt;p>&lt;a href="https://themes.gohugo.io/themes/hugo-theme-re-terminal/#demo-and-some-blog-posts-about-re-terminal---httpsre-terminalnebrowsercom">re-terminal theme link&lt;/a>&lt;/p>
&lt;p>이 테마는 적어도 Hugo &lt;strong>Extended&lt;/strong> v0.128.x.가 필요하다.&lt;/p>
&lt;h4 id="install-theme-locally">install theme locally&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/mirus-ua/hugo-theme-re-terminal.git themes/re-terminal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="install-theme-as-a-submodule">Install theme as a submodule&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new site &lt;span style="color:#f92672">{&lt;/span>blogName&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd &lt;span style="color:#f92672">{&lt;/span>blogName&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule add -f https://github.com/mirus-ua/hugo-theme-re-terminal.git themes/re-terminal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;theme = &amp;#39;re-terminal&amp;#39;&amp;#34;&lt;/span> &amp;gt;&amp;gt; hugo.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>git clone이나 서브모듈을 사용해서 설치하면 되는데 어째 clone으로는 제대로 되지 않아서 submodule로 하니까 됐다.&lt;br>
앞으로 버전이 오를 수도 있으니 서브모듈을 쓰는 것이 좋은듯.&lt;/p>
&lt;h3 id="4단계--일단-설치한-테마가-열리는지-확인해본다-how-to-run-your-site">4단계 : 일단 설치한 테마가 열리는지 확인해본다. How to run your site&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-4단계-새로운-페이지content-만들기">✅ 4단계: 새로운 페이지(content) 만들기&lt;/h2>
&lt;p>새로운 페이지를 만들어보자&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new content content/posts/my-first-post.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그러면 아래와 같은 md파일이 만들어진다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-md" data-lang="md">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title = &amp;#39;My First Post&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date = 2024-01-14T07:07:07+01:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft = true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+++
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>다른 예제들을 보면 author라던가 여러 value를 지정할 수 있는데 여기는&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> archetypes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>폴더 안에 정의가 되어 있는 속성들만 현재 사용할 수 있었다.&lt;br>
자꾸 에러가 나서 보니 내가 받은 테마가 가장 기본적인 것 같다.&lt;/p>
&lt;h3 id="이후에-개발-서버를-통해-빌드-후-사이트를-확인한다">이후에 개발 서버를 통해 빌드 후 사이트를 확인한다.&lt;/h3>
&lt;pre tabindex="0">&lt;code>hugo server --buildDrafts
hugo server -D
&lt;/code>&lt;/pre>&lt;p>페이지가 문제가 없다면 이제 배포다&lt;/p>
&lt;h2 id="-5단계-github-actions로-배포하기">✅ 5단계: Github Actions로 배포하기&lt;/h2>
&lt;p>모든 건 공홈에서 !! &lt;a href="https://gohugo.io/host-and-deploy/host-on-github-pages/">https://gohugo.io/host-and-deploy/host-on-github-pages/&lt;/a>&lt;/p>
&lt;h3 id="github에서의-설정을-수정한다">Github에서의 설정을 수정한다.&lt;/h3>
&lt;p>Settings &amp;gt; Pages의 Build and deployment와
Source를 Github Actions로 수정하면 된다. 수정 후 아래의 이미지와 같다.&lt;/p>
&lt;p>&lt;img src="https://jo-gangeun.github.io/zomggang-devblog/image/20250406/github_action.png" alt="github action settings">&lt;/p>
&lt;h3 id="yaml파일로-workflow만들기">yaml파일로 workflow만들기&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p .github/workflows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>touch .github/workflows/hugo.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>왠만해서는 공홈의 소스를 복붙하는 것을 추천하지만 일단 아래와 같다&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-config" data-lang="config"># Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages
on:
# Runs on pushes targeting the default branch
push:
branches:
- main
# Allows you to run this workflow manually from the Actions tab
workflow_dispatch:
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
contents: read
pages: write
id-token: write
# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
group: &amp;#34;pages&amp;#34;
cancel-in-progress: false
# Default to bash
defaults:
run:
shell: bash
jobs:
# Build job
build:
runs-on: ubuntu-latest
env:
HUGO_VERSION: 0.145.0
HUGO_ENVIRONMENT: production
TZ: America/Los_Angeles
steps:
- name: Install Hugo CLI
run: |
wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
&amp;amp;&amp;amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb
- name: Install Dart Sass
run: sudo snap install dart-sass
- name: Checkout
uses: actions/checkout@v4
with:
submodules: recursive
fetch-depth: 0
- name: Setup Pages
id: pages
uses: actions/configure-pages@v5
- name: Install Node.js dependencies
run: &amp;#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] &amp;amp;&amp;amp; npm ci || true&amp;#34;
- name: Cache Restore
id: cache-restore
uses: actions/cache/restore@v4
with:
path: |
${{ runner.temp }}/hugo_cache
key: hugo-${{ github.run_id }}
restore-keys:
hugo-
- name: Build with Hugo
run: |
hugo \
--gc \
--minify \
--baseURL &amp;#34;${{ steps.pages.outputs.base_url }}/&amp;#34; \
--cacheDir &amp;#34;${{ runner.temp }}/hugo_cache&amp;#34;
- name: Cache Save
id: cache-save
uses: actions/cache/save@v4
with:
path: |
${{ runner.temp }}/hugo_cache
key: ${{ steps.cache-restore.outputs.cache-primary-key }}
- name: Upload artifact
uses: actions/upload-pages-artifact@v3
with:
path: ./public
# Deployment job
deploy:
environment:
name: github-pages
url: ${{ steps.deployment.outputs.page_url }}
runs-on: ubuntu-latest
needs: build
steps:
- name: Deploy to GitHub Pages
id: deployment
uses: actions/deploy-pages@v4
&lt;/code>&lt;/pre>&lt;p>이 파일을 만든 후 commit 과 push를 하면 github repository에 반영이 된다.
그럼과 동시에 Githubs Action에서 workflow가 실행이되는데&lt;/p>
&lt;p>&lt;img src="https://jo-gangeun.github.io/zomggang-devblog/image/20250406/github_action_success.png" alt="github actions에서 성공한 경우">&lt;/p>
&lt;p>사실 이러면 404에러가 나오고 그랬는데 baseUrl을 바꿀 필요가 있었다.&lt;/p>
&lt;p>hugo.toml의 BaseUrl을 아래와 같이 바꾸고, 빌드하면서 sitemap,index등이 루트 디렉토리가 잘 변경되었는지 확인해본다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>baseURL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://jo-gangeun.github.io/zomggang-devblog/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이대로 다시 빌드해서 배포하면 문제없이 github pages가 배포된다! 끝&lt;/p>
&lt;p>&amp;hellip;&lt;/p></content></item></channel></rss>